#!/usr/bin/python
import time
from datetime import datetime
import sqlite3
from easysnmp import Session
from sqlite3 import Error

VL = 'DEFAULT_VLAN()'
def  create_connection(db_file):
    connect = None
    try:
        connect = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    finally:
        if connect:
            reply = connect.execute('Select * from switches')
            for items in reply:
                ip = items[0]; port=int(items[1]); community=items[2]; version=int(items[3])
                probing_with_oids(ip, port, community,version, connect)

            connect.close()
def probing_with_oids(ip, port, community, version, connect):
    oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
            'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
            'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
            'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
            'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
            'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
            'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
            'sysDescr':'1.1.3.6.1.2.1.1.1',
            'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
            'vlans':'1.3.6.1.2.1.17.7.1.4.3.1.4'}
    try:
        session = Session(hostname=ip, remote_port=port, version=version, community=community)
    except Exception as e:
        print(e)
        attempt_fail = connect.execute("select attempt_fail from switches where ip=?, port=?",(ip,port))
        attempt_fail += 1
        connect.execute("update switches set attempt_fail=? where (ip=? and port=?)",(attempt_fail,ip,port))
        connect.commit()
    start = str(datetime.fromtimestamp(int(time.time())))
    print(start)
    try:
        macid = session.walk(oids['dot1dTpFdbEntryAddress'])
        portnumber = session.walk(oids['dot1dTpFdbEntryPort'])
        for o,p in zip(macid, portnumber):
            oid = o.oid;oid_index = o.oid_index;snmp_type=o.snmp_type
            macoid = ':'.join('{:02x}'.format(ord(a)) for a in o.value)
            portval = p.value
            print(ip,macoid,portval)
            reply = connect.execute("SELECT * from List where (port=? and Device=?)",(portval,ip))
            fetch_data = reply.fetchall()
            for connected_macs in fetch_data:
                o = connected_macs[3]
            if len(fetch_data)==0:
                print(ip,macoid,portval)
                connect.execute('''INSERT INTO List(Device, VLANS, port, MACS) values (?,?,?,?)''',(ip,VL,portval,macoid))
                connect.commit()
            elif len(fetch_data)==1 and o.find(macoid)==-1:
                finalmac = o+","+macoid
                connect.execute("UPDATE List set MACS=? where port=?",(finalmac,portval))
                connect.commit()
        vlansnum = []
        vlanname = []
        vlans = session.walk(oids['vlans'])
        vlanindex = session.walk(oids['dot1qVlanStaticName'])
        values = []
        vlan_oids = []
        for index, vlan in zip(vlanindex, vlans):
            value = ':'.join('{:02x}'.format(ord(x)) for x in vlan.value)
            values = value.split(':')
            oid = vlan.oid
            vlan_oids.append(oid)
            vname = index.value
            vnums = oid.split('.')
            vnum = str(vnums[-1])
            combine = ''
            if vname != VL:
                for x in range(len(values)):
                    hexlist = values
                    mac_hex = hexlist[x]
                    scale = 16
                    no_of_bits = 8
                    orghex = bin(int(mac_hex, scale))[2:].zfill(no_of_bits)
                    combine = combine + str(orghex)
                    orghex = ''
                    listvls = list(combine)
                for x in range(len(listvls)):
                    num = x + 1
                    vlanname.append(str(vname))
                    vlansnum.append(num)
        for x in range(len(vlansnum)):
            portlan = '1'
            connect.execute("update List set VLANS = ? where port=?", (vlanname[x],vlansnum[x]))
            time.sleep(0.005)
	    connect.commit()
    except Exception as e:
        print(str(e)+' '+str(ip)+":"+str(port))
    finish = str(datetime.fromtimestamp(int(time.time())))
    print(finish)
    print('done!')
    connect.execute("update switches set first_probetime=?, latest_probetime=? where (ip=? and port=?)",(start, finish, ip, port))
    connect.commit()
    print("updating storage")
if  __name__=='__main__':
    while True:
        create_connection('subhash.db')
        time.sleep(60)

